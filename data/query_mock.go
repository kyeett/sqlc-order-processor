// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package data

import (
	"context"
	"sync"
)

// Ensure, that QuerierMock does implement Querier.
// If this is not the case, regenerate this file with moq.
var _ Querier = &QuerierMock{}

// QuerierMock is a mock implementation of Querier.
//
//     func TestSomethingThatUsesQuerier(t *testing.T) {
//
//         // make and configure a mocked Querier
//         mockedQuerier := &QuerierMock{
//             CreateOrderFunc: func(ctx context.Context, arg CreateOrderParams) (Order, error) {
// 	               panic("mock out the CreateOrder method")
//             },
//             GetOrderFunc: func(ctx context.Context, id int32) (Order, error) {
// 	               panic("mock out the GetOrder method")
//             },
//         }
//
//         // use mockedQuerier in code that requires Querier
//         // and then make assertions.
//
//     }
type QuerierMock struct {
	// CreateOrderFunc mocks the CreateOrder method.
	CreateOrderFunc func(ctx context.Context, arg CreateOrderParams) (Order, error)

	// GetOrderFunc mocks the GetOrder method.
	GetOrderFunc func(ctx context.Context, id int32) (Order, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateOrder holds details about calls to the CreateOrder method.
		CreateOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg CreateOrderParams
		}
		// GetOrder holds details about calls to the GetOrder method.
		GetOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int32
		}
	}
	lockCreateOrder sync.RWMutex
	lockGetOrder    sync.RWMutex
}

// CreateOrder calls CreateOrderFunc.
func (mock *QuerierMock) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	if mock.CreateOrderFunc == nil {
		panic("QuerierMock.CreateOrderFunc: method is nil but Querier.CreateOrder was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg CreateOrderParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateOrder.Lock()
	mock.calls.CreateOrder = append(mock.calls.CreateOrder, callInfo)
	mock.lockCreateOrder.Unlock()
	return mock.CreateOrderFunc(ctx, arg)
}

// CreateOrderCalls gets all the calls that were made to CreateOrder.
// Check the length with:
//     len(mockedQuerier.CreateOrderCalls())
func (mock *QuerierMock) CreateOrderCalls() []struct {
	Ctx context.Context
	Arg CreateOrderParams
} {
	var calls []struct {
		Ctx context.Context
		Arg CreateOrderParams
	}
	mock.lockCreateOrder.RLock()
	calls = mock.calls.CreateOrder
	mock.lockCreateOrder.RUnlock()
	return calls
}

// GetOrder calls GetOrderFunc.
func (mock *QuerierMock) GetOrder(ctx context.Context, id int32) (Order, error) {
	if mock.GetOrderFunc == nil {
		panic("QuerierMock.GetOrderFunc: method is nil but Querier.GetOrder was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int32
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetOrder.Lock()
	mock.calls.GetOrder = append(mock.calls.GetOrder, callInfo)
	mock.lockGetOrder.Unlock()
	return mock.GetOrderFunc(ctx, id)
}

// GetOrderCalls gets all the calls that were made to GetOrder.
// Check the length with:
//     len(mockedQuerier.GetOrderCalls())
func (mock *QuerierMock) GetOrderCalls() []struct {
	Ctx context.Context
	ID  int32
} {
	var calls []struct {
		Ctx context.Context
		ID  int32
	}
	mock.lockGetOrder.RLock()
	calls = mock.calls.GetOrder
	mock.lockGetOrder.RUnlock()
	return calls
}
